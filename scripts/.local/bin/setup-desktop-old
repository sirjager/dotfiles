#!/usr/bin/env bash

## Author : Ankur Kumar (SirJager)
## Github : @SirJager

_clr() {
	case "$1" in
	"red")
		printf "\033[1;31m%s\033[0m\n" "$2"
		;;
	"green")
		printf "\033[1;32m%s\033[0m\n" "$2"
		;;
	"yellow")
		printf "\033[1;33m%s\033[0m\n" "$2"
		;;
	"orange")
		printf "\033[1;34m%s\033[0m\n" "$2"
		;;
	"purple")
		printf "\033[1;35m%s\033[0m\n" "$2"
		;;
	"blue")
		printf "\033[1;36m%s\033[0m\n" "$2"
		;;
	"gray" | "grey")
		printf "\033[1;37m%s\033[0m\n" "$2"
		;;
	"white")
		printf "\033[1;37m%s\033[0m\n" "$2"
		;;
	*)
		printf "%s\n" "$2"
		;;
	esac
}

_log() {
	if [ "$1" != "" ]; then
		if [ "$2" != "" ]; then
			_clr "$1" "$2"
			echo
		else
			echo "$1"
		fi
	fi

	if [ "$3" = "exit" ]; then
		if [ "$4" = "0" ]; then
			exit 0
		else
			exit 1
		fi
	fi
}

update_system() {
	echo
	_log blue "Updating system"
	sudo pacman -Syyu
}

install_yay() {
	_log blue "Installing yay package manager"
	sudo pacman --needed --noconfirm -S yay
}

install_amd_graphics() {
	_log blue "Installing AMD Graphic Drivers..."
	yay --needed --noconfirm -S \
		lib32-mesa vulkan-radeon lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader &&
		_log green "Installed AMD Graphic Drivers"
}

mount_ntfs_storage() {
	TARGET_NTFS_STORAGE_NAME="STORAGE"
	MOUNT_TARGETED_NTFS_AT_THIS_PATH=/mnt/storage
	NTFS_DRIVE_UUID=$(sudo blkid -s UUID -o value -l -c /dev/null -t LABEL="$TARGET_NTFS_STORAGE_NAME")
	if [ -n "$NTFS_DRIVE_UUID" ]; then
		sudo mkdir -p $MOUNT_TARGETED_NTFS_AT_THIS_PATH
		echo "UUID=$NTFS_DRIVE_UUID $MOUNT_TARGETED_NTFS_AT_THIS_PATH ntfs defaults 0 1" | sudo tee -a /etc/fstab
		sudo systemctl daemon-reload
		sudo mount -a
		_log green "Successfully mounted $TARGET_NTFS_STORAGE_NAME ($NTFS_DRIVE_UUID) at path $MOUNT_TARGETED_NTFS_AT_THIS_PATH"
	else
		_log red "Error: Unable to retrieve the UUID for the '$TARGET_NTFS_STORAGE_NAME' partition"
	fi
}

install_core_pkgs() {
	yay --needed --noconfirm -S \
		base-devel os-prober meson ninja uthash \
		pass archlinux-xdg-menu network-manager-applet \
		htop wget curl git gtk3 gtk4 libconfig pkgconfig \
		gvfs direnv jq gvfs-afc gvfs-gphoto2 gvfs-mtp gvfs-nfs gvfs-smb \
		grub-btrfs xorg-server xorg-xinit xorg-xsetroot xorg-xbacklight \
		xorg-xinput xorg-xprop xorg-xkill xorg-xwininfo xorg-xrandr \
		xclip xsel xdotool playerctl pamixer polkit-gnome \
		dunst feh light fzf ripgrep fd marked shellcheck neovim tmux gufw gtk-engine-murrine \
		xdg-user-dirs-gtk xed i3lock exa imagemagick scrot gnome-keyring python-pywal \
		rofi-emoji rofi-calc trash-cli
}

install_and_setup_sddm() {
	echo
	_log blue "Installing SDDM and required dependencies"
	yay --needed --noconfirm -S S sddm qt5-graphicaleffects qt5-quickcontrols2 qt5-svg
	if [ $? -eq 0 ]; then
		_log green "Successfully installed SDDM"
	else
		_log red "Failed to install SDDM"
		return 1
	fi
	_log yellow "Trying to disable other lock screen managers"
	sudo systemctl disable lightdm
	sudo systemctl disable gdm
	echo
	_log yellow "Enabling sddm service"
	sudo systemctl enable sddm
	echo

	_log yellow "Downloading sddm theme sugar-candy"
	rm -rf ~/Downloads/sugar-candy
	git clone https://github.com/Kangie/sddm-sugar-candy ~/Downloads/sugar-candy
	_log yellow "Applying sddm theme configs"
	echo 'Background="/mnt/storage/wallpaper/sddm.png"' >>~/Downloads/sugar-candy/theme.conf
	echo 'PartialBlur="false"' >>~/Downloads/sugar-candy/theme.conf
	cp -f /usr/lib/sddm/sddm.conf.d/default.conf ~/Downloads/sugar-candy/sddm.conf
	printf '\n[Theme]\nCurrent=sugar-candy' >>~/Downloads/sugar-candy/sddm.conf
	printf '\n[General]\nNumlock=on' >>~/Downloads/sugar-candy/sddm.conf
	sudo rm -f /etc/sddm.conf
	sudo cp -f ~/Downloads/sugar-candy/sddm.conf /etc/sddm.conf
	sudo mv ~/Downloads/sugar-candy /usr/share/sddm/themes/sugar-candy
	_log green "Successfully installed and configured SDDM Lock screen manager"
}

install_bspwm() {
	install_core_pkgs
	_log blue "Installing BSPWM ..."
	yay --needed --noconfirm -S \
		bspwm polybar feh mpv sxhkd rofi picom \
    xorg-xsetroot lxappearance trash-cli
}

discover_other_os_on_grub() {
	echo
	_log blue "Setting up Grub Menu..."
	yay --needed --noconfirm -S os-prober
	cat /etc/default/grub | tee ~/grub
	printf 'GRUB_DISABLE_OS_PROBER=false' >>~/grub
	sudo mv /etc/default/grub /etc/default/grub.bak
	sudo mv ~/grub /etc/default/grub
	sudo os-prober
	sudo grub-mkconfig -o /boot/grub/grub.cfg
}

install_rog_control_center() {
	_log blue "Installing Rog Control center"
	yay --needed --noconfirm -S asusctl supergfxctl rog-control-center
	_log yellow "Enabling service"
	sudo systemctl enable --now supergfxd
}

install_docker() {
	yay --needed --noconfirm -S docker docker-compose
	sudo usermod -aG docker "$(whoami)"
	sudo systemctl enable --now docker
	sudo systemctl restart docker
}

create_smb_conf() {
	echo "[global]"
	echo "    server role = standalone server"
	echo "    workgroup = WORKGROUP"
	echo "    map to guest = never"
	echo "    usershare allow guests = no"
	echo "    hosts allow = 192.168.0.0/16"
	echo "    hosts deny = 0.0.0.0/0"
	echo ""
	echo "[Storage]"
	echo "    comment = Storage"
	echo "    path = /mnt/storage"
	echo "    read only = no"
	echo "    writeable = yes"
	echo "    guest ok = no"
	echo "    valid users = jager"
	echo "    force user = jager"
	echo "    force group = jager"
	echo "    create mask = 0755"
	echo "    directory mask = 0755"
	echo "    browseable = yes"
}

enable_samba_shares() {
	_log blue "Enabling samba shares"
	yay --needed --noconfirm -S samba
	sudo groupadd -r sambashare
	sudo usermod -aG sambashare "$(whoami)"
	echo
	_log red "Create a smaba password for user '$(whoami)'"
	sudo smbpasswd -a "$(whoami)"
	[ -e ~/smb.conf ] && rm -f ~/smb.conf
	create_smb_conf >~/smb.conf
	[ ! -d /etc/samba ] && sudo mkdir /etc/samba
	[ -e /etc/samba/smb.conf.old ] && sudo rm -f /etc/samba/smb.conf.old
	[ -e /etc/samba/smb.conf ] && sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.old
	sudo cp -f ~/smb.conf /etc/samba/smb.conf
	_log green "Configuration has been written to smb.conf"
	_log yellow "1. Click on + add rule"
	_log yellow "2. Select preconfigured profile: search Samba"
	_log yellow "3. Allow Samba ports"
	_log yellow "4. Close the firewall"
	sudo gufw
	sudo systemctl enable --now smb
	sudo systemctl restart smb
	[ -e ~/smb.conf ] && rm -f ~/smb.conf
	_log green "Samba share configured..."
}

while true; do
	echo
	echo
	# Prompt user for function choice
	_clr cyan "Choose a function to run:"
	_clr yellow " 1.  Update system"
	_clr yellow " 2.  Install yay"
	_clr yellow " 3.  Install core pkgs"
	_clr yellow " 4.  Mount NTFS storage"
	_clr yellow " 5.  Setup SDDM"
	_clr yellow " 6.  Setup Firewall"
	_clr yellow " 7.  Setup Tmux"
	_clr yellow " 8.  Setup Dotfiles"
	_clr yellow " 9.  Install Bspwm"
	_clr yellow "10.  Install Virt-Manager"
	_clr yellow "11.  Setup Grub Menu Windows Menu entry"
	_clr yellow "12.  Install User packages"
	_clr yellow "13.  Install Rog Control Center"
	_clr yellow "14.  Uninstall Virt-Manager"
	_clr yellow "15.  Install AMD Graphics Driver"
	_clr yellow "16.  Enable Samba Share"
	_clr yellow "17.  Install Docker"
	_clr yellow "18.  Run Portainer"
	echo " "
	_clr purple "0. Quit or Ctrl+C"
	echo "Option number"
	read -r choice
	case $choice in
	1)
		update_system
		;;
	2)
		install_yay
		;;
	3)
		install_core_pkgs
		;;
	4)
		mount_ntfs_storage
		;;
	5)
		install_and_setup_sddm
		;;
	6)
		setup_firewall
		;;
	7)
		setup_tmux
		;;
	8)
		setup_dotfiles_repo
		;;
	9)
		install_bspwm
		;;
	10)
		install_virt_manager
		;;
	11)
		discover_other_os_on_grub
		;;
	12)
		install_user_pkgs
		;;
	13)
		install_rog_control_center
		;;
	14)
		uninstall_virt_manager
		;;
	15)
		install_amd_graphics
		;;
	16)
		enable_samba_shares
		;;
	17)
		install_docker
		;;
	18)
		run_portainer
		;;
	0)
		break
		;;
	*)
		_log red "Invalid choice. Please choose a valid option."
		;;
	esac
done

_log green "Script execution complete. Exiting..." exit 0
