#!/usr/bin/env bash

TIMER_FILE="$HOME/.local/state/capturecli"

# Default OBS Profile name; should exists
PROFILE="recording"

# set using --<params>
ACTION=""

# Delay in seconds for screen recording and screenshot
DELAY="0"

# set using --<params>
ACTION=""

# Delay in seconds for screen recording and screenshot
DELAY="0"

# OBS Icon
OBS_ICON="com.obsproject.Studio"

# Default directories
SCREENSHOT_DIR="$mystorage/downloads/Screenshots"
RECORDINGS_DIR="$mystorage/downloads/Recordings"

NOTIFY_ID="92832" # id to keep replace old notifications

# Rofi theme like dmneu
ROFI_THEME="$HOME/.config/sxhkd/rofi/horizontal.rasi"

while [ $# -gt 0 ]; do
  case "$1" in
  --output | output | -o)
    SCREENSHOT_DIR="$2"
    RECORDINGS_DIR="$2"
    shift 2
    ;;
  --profile | profile | -p)
    PROFILE="$2"
    shift 2
    ;;
  --start | start | -s)
    ACTION="start"
    shift
    ;;
  --stop | stop | -x)
    ACTION="stop"
    shift
    ;;
  --timer | timer | -t)
    ACTION="timer"
    shift
    ;;
  --window | window | -w)
    ACTION="window"
    shift
    ;;
  --screen | screen | -f)
    ACTION="screen"
    shift
    ;;
  --selection | selection | -c)
    ACTION="selection"
    shift
    ;;
  --delay | delay)
    DELAY="$2"
    shift 2
    ;;
  --notify | notify | --notification | notification | -n)
    ACTION="notification"
    shift
    ;;
  --help | help | -h)
    ACTION="help"
    shift
    ;;
  *)
    shift
    ;;
  esac
done

# create screenshot dir if does not exiss
[ ! -d "$SCREENSHOT_DIR" ] && mkdir -p "$SCREENSHOT_DIR"

# create recordings dir if does not exiss
[ ! -d "$RECORDINGS_DIR" ] && mkdir -p "$RECORDINGS_DIR"

show_help() {
  echo "Usage: $0 [OPTIONS]"
  echo "Options:"
  echo "  --profile, -p <profile>   Specify OBS profile (default: recording)"
  echo "  --start, -s               Start recording"
  echo "  --stop, -x                Stop recording"
  echo "  --timer, -t               Show timer for current recording"
  echo "Examples:"
  echo "  $0 --start -p custom_profile"
  echo "  $0 --stop"
  echo "  $0 --timer"
}

is_notify_on() {
  if [ -f "$TIMER_FILE.notify" ]; then
    return 0
  else
    return 1
  fi
}

toggle_notify() {
  if [ -z "$1" ]; then
    if is_notify_on; then
      rm -f "$TIMER_FILE.notify"
      dunstify --close="$NOTIFY_ID"
    else
      touch "$TIMER_FILE.notify"
    fi
  elif [ "$1" = "on" ]; then
    [ ! -f "$TIMER_FILE.notify" ] && touch "$TIMER_FILE.notify"
  else
    [ -f "$TIMER_FILE.notify" ] && rm -f "$TIMER_FILE.notify"
    dunstify --close="$NOTIFY_ID"
  fi
}

# Delays if Delay is set
delay() {
  if [[ "$DELAY" =~ ^[0-9]+$ ]]; then
    sleep "$DELAY"
  fi
}

get_timer() {
  if [ -f "$TIMER_FILE" ]; then
    START_TIME=$(cat "$TIMER_FILE")
    NOW=$(date +%s)
    DURATION=$((NOW - START_TIME))
    MINUTES=$(($DURATION / 60))
    SECONDS=$(($DURATION % 60))
    MESSAGE="$MINUTES mins $SECONDS sec"
    echo "$MESSAGE"
    is_notify_on && dunstify -i "$OBS_ICON" -a "OBS" -r "$NOTIFY_ID" "Elapsed: $MESSAGE"
  fi

  if is_notify_on; then
    get_timer >/dev/null 2>&1 &
  fi
}

function cleanup() {
  if [ -d "$HOME/.config/obs-studio/logs" ]; then
    rm -rf "$HOME/.config/obs-studio/logs" 2>/dev/null
    mkdir -p "$HOME/.config/obs-studio/logs" 2>/dev/null
    rm -f "$HOME/.config/obs-studio/safe_mode" 2>/dev/null
  fi
}

function stop_recording() {
  delay
  command pkill obs >/dev/null 2>&1 &
  [ -f "$TIMER_FILE" ] && rm -f "$TIMER_FILE" >/dev/null 2>&1
  dunstify --close="$NOTIFY_ID"
}

is_recording() {
  if [ -f "$TIMER_FILE" ]; then
    return 0
  else
    return 1
  fi
}

function start_recording() {
  if is_recording; then
    message="Already recording"
    is_notify_on && dunstify -u critical -i "$OBS_ICON" -a "OSB" "$message"
    exit 0
  fi

  delay                   # if delay is passed
  cleanup                 # cleanup logs of obs
  date +%s >"$TIMER_FILE" # create new timer file
  DRI_PRIME=1 obs \
    --profile "$PROFILE" \
    --minimize-to-tray \
    --startrecording >/dev/null 2>&1 &
}

capture_selection() {
  delay # if delay is passed
  FILENAME=$(date +"%Y-%m-%d_%H-%M-%S_%3N")
  FILEPATH="$SCREENSHOT_DIR/$FILENAME.png"
  gnome-screenshot --area --file="$FILEPATH" >/dev/null 2>&1 &&
    is_notify_on && dunstify -i "$FILEPATH" -a "Screenshot" "Screenshot captured" "$FILEPATH"
}

capture_window() {
  delay # if delay is passed
  FILENAME=$(date +"%Y-%m-%d_%H-%M-%S_%3N")
  FILEPATH="$SCREENSHOT_DIR/$FILENAME.png"
  gnome-screenshot --window --file="$FILEPATH" >/dev/null 2>&1 &&
    is_notify_on && dunstify -i "$FILEPATH" -a "Screenshot" "Screenshot captured" "$FILEPATH"
}

capture_screen() {
  delay # if delay is passed
  FILENAME=$(date +"%Y-%m-%d_%H-%M-%S_%3N")
  FILEPATH="$SCREENSHOT_DIR/$FILENAME.png"
  gnome-screenshot --file="$FILEPATH" >/dev/null 2>&1 &&
    is_notify_on && dunstify -i "$FILEPATH" -a "Screenshot" "Screenshot Captured" "$FILEPATH"
}

open_directory() {
  if command -v xdg-open &>/dev/null; then
    xdg-open "$1" # Linux
  elif command -v open &>/dev/null; then
    open "$1" # macOS
  else
    echo "No supported file explorer found."
  fi
}

# screenshot options
OPTS=("screen capture" "window capture" "selection capture")

# enable or disable notifications for screenshot and recordings
if is_notify_on; then
  OPTS+=("notification disable")
else
  OPTS+=("notification enable")
fi

# if recording, then "stop" and "timer" are valid options
if is_recording; then
  OPTS+=("stop recording" "timer recording")
else
  # if not recording, then only "start recording" options should be present
  OPTS+=("start recording")
fi

# adding them last becz i want them to display i last of the list
OPTS+=("screenshots directory" "recordings directory")

# rofi options
ROFI_OPTS=$(printf "%s\n" "${OPTS[@]}")

# only get selection if action is empty
[ -z "$ACTION" ] && SELECTION=$(echo "$ROFI_OPTS" | rofi -dmenu -theme "$ROFI_THEME" -p "Capture : ")

# if selection is not empty then set action to selection
[ -n "$SELECTION" ] && ACTION=$(echo "$SELECTION" | awk '{print $1}') # $1 is action in all opts

case "$ACTION" in
start | record)
  start_recording
  ;;
stop | cancel)
  stop_recording
  ;;
timer | duration | elapsed)
  get_timer
  ;;
notification | notify)
  toggle_notify ""
  ;;
screen | fullscreen | desktop)
  capture_screen
  ;;
window)
  capture_window
  ;;
selection | area | selected | mouse)
  capture_selection
  ;;
screenshot | screenshots | images | captures | shots)
  open_directory "$SCREENSHOT_DIR"
  ;;
recording | recordings | vidoes | files)
  open_directory "$RECORDINGS_DIR"
  ;;
help)
  show_help
  ;;
*)
  exit 0
  ;;
esac
