#!/usr/bin/env bash

## Author : Ankur Kumar (SirJager)
## Github : @SirJager

mount_ntfs_storage() {
	TARGET_NTFS_STORAGE_NAME="STORAGE"
	MOUNT_TARGETED_NTFS_AT_THIS_PATH=/mnt/storage
	NTFS_DRIVE_UUID=$(sudo blkid -s UUID -o value -l -c /dev/null -t LABEL="$TARGET_NTFS_STORAGE_NAME")
	if [ -n "$NTFS_DRIVE_UUID" ]; then
		sudo mkdir -p $MOUNT_TARGETED_NTFS_AT_THIS_PATH
		echo "UUID=$NTFS_DRIVE_UUID $MOUNT_TARGETED_NTFS_AT_THIS_PATH ntfs defaults 0 1" | sudo tee -a /etc/fstab
		sudo systemctl daemon-reload
		sudo mount -a
	fi
}

install_core_pkgs() {
	yay --needed --noconfirm -S \
		base-devel os-prober meson ninja uthash \
		pass archlinux-xdg-menu network-manager-applet \
		htop wget curl git gtk3 gtk4 libconfig pkgconfig \
		gvfs direnv jq gvfs-afc gvfs-gphoto2 gvfs-mtp gvfs-nfs gvfs-smb \
		grub-btrfs xorg-server xorg-xinit xorg-xsetroot xorg-xbacklight \
		xorg-xinput xorg-xprop xorg-xkill xorg-xwininfo xorg-xrandr \
		xclip xsel xdotool playerctl pamixer polkit-gnome \
		dunst feh light fzf ripgrep fd marked shellcheck neovim tmux gufw gtk-engine-murrine \
		xdg-user-dirs-gtk xed i3lock exa imagemagick scrot gnome-keyring python-pywal \
		rofi-emoji rofi-calc trash-cli
}

install_and_setup_sddm() {
	echo
	yay --needed --noconfirm -S S sddm qt5-graphicaleffects qt5-quickcontrols2 qt5-svg
	if [ $? -eq 0 ]; then
		echo "Successfully installed SDDM"
	else
		echo "Failed to install SDDM"
		return 1
	fi
	sudo systemctl disable lightdm
	sudo systemctl disable gdm
	echo
	sudo systemctl enable sddm
	echo

	rm -rf ~/Downloads/sugar-candy
	git clone https://github.com/Kangie/sddm-sugar-candy ~/Downloads/sugar-candy
	echo 'Background="/mnt/storage/wallpaper/sddm.png"' >>~/Downloads/sugar-candy/theme.conf
	echo 'PartialBlur="false"' >>~/Downloads/sugar-candy/theme.conf
	cp -f /usr/lib/sddm/sddm.conf.d/default.conf ~/Downloads/sugar-candy/sddm.conf
	printf '\n[Theme]\nCurrent=sugar-candy' >>~/Downloads/sugar-candy/sddm.conf
	printf '\n[General]\nNumlock=on' >>~/Downloads/sugar-candy/sddm.conf
	sudo rm -f /etc/sddm.conf
	sudo cp -f ~/Downloads/sugar-candy/sddm.conf /etc/sddm.conf
	sudo mv ~/Downloads/sugar-candy /usr/share/sddm/themes/sugar-candy
}

install_bspwm() {
	# minimal requirements for setting bspwm on arch linux

	echo
	echo "Installing AMD Graphic Driver"
	sudo pacman --needed -S xf86-video-amdgpu lib32-mesa vulkan-radeon \
		lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader

	echo
	echo "Installing Display Manager"
	sudo pacman --needed -S xorg-xhost xorg-server xorg-xinit xorg-xsetroot xorg-xkill \
		xorg-xwininfo xorg-xprop xorg-xrandr xorg-xbacklight xorg-xinput

	echo
	echo "Installing Window Manager: bars, terminal, window manager, wallpapers"
	sudo pacman --needed -S bspwm sxhkd polybar feh picom rofi kitty python-pywal

	sudo pacman --needed -S gtk-engine-murrine gtk-engines

	echo
	echo "Installing desktop utils: volume,brightness,wifi,bluetooths,lockscreen,notifications"
	yay --needed -S libnotify xfce4-notifyd pamixer light i3lock \
		network-manager-applet blueman bluez bluez-utils

	echo
	echo "Installing shell utils"
	sudo pacman --needed -S xclip xsel xdotool fd fzf ripgrep eza trash-cli

	echo
	echo "Installing applications: nautilus, timeshift"
	sudo pacman --needed -S nautilus timeshift

	echo
  # https://archlinux.org/groups/any/nerd-fonts
	echo "Installing Patched Nerd Fonts: JetBrain, SourceCodePro"
	sudo pacman --needed -S ttf-sourcecodepro-nerd ttf-jetbrains-mono-nerd
}

discover_other_os_on_grub() {
	echo
	yay --needed --noconfirm -S os-prober
	cat /etc/default/grub | tee ~/grub
	printf 'GRUB_DISABLE_OS_PROBER=false' >>~/grub
	sudo mv /etc/default/grub /etc/default/grub.bak
	sudo mv ~/grub /etc/default/grub
	sudo os-prober
	sudo grub-mkconfig -o /boot/grub/grub.cfg
}

install_rog_control_center() {
	yay --needed --noconfirm -S asusctl supergfxctl rog-control-center
	sudo systemctl enable --now supergfxd
}

install_docker() {
	yay --needed --noconfirm -S docker docker-compose
	sudo usermod -aG docker "$(whoami)"
	sudo systemctl enable --now docker.service
	sudo systemctl daemon-reload
	sudo systemctl restart docker
}

create_smb_conf() {
	echo "[global]"
	echo "    server role = standalone server"
	echo "    workgroup = WORKGROUP"
	echo "    map to guest = never"
	echo "    usershare allow guests = no"
	echo "    hosts allow = 192.168.0.0/16"
	echo "    hosts deny = 0.0.0.0/0"
	echo ""
	echo "[Storage]"
	echo "    comment = Storage"
	echo "    path = /mnt/storage"
	echo "    read only = no"
	echo "    writeable = yes"
	echo "    guest ok = no"
	echo "    valid users = jager"
	echo "    force user = jager"
	echo "    force group = jager"
	echo "    create mask = 0755"
	echo "    directory mask = 0755"
	echo "    browseable = yes"
}

enable_samba_shares() {
	yay --needed --noconfirm -S samba
	sudo groupadd -r sambashare
	sudo usermod -aG sambashare "$(whoami)"
	echo
	sudo smbpasswd -a "$(whoami)"
	[ -e ~/smb.conf ] && rm -f ~/smb.conf
	create_smb_conf >~/smb.conf
	[ ! -d /etc/samba ] && sudo mkdir /etc/samba
	[ -e /etc/samba/smb.conf.old ] && sudo rm -f /etc/samba/smb.conf.old
	[ -e /etc/samba/smb.conf ] && sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.old
	sudo cp -f ~/smb.conf /etc/samba/smb.conf
	sudo gufw
	sudo systemctl enable --now smb
	sudo systemctl restart smb
	[ -e ~/smb.conf ] && rm -f ~/smb.conf
}


