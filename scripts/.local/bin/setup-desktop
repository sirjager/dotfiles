#!/usr/bin/env bash

## Author : Ankur Kumar (SirJager)
## Github : @SirJager

pkgs=(

	#
	"base-devel" "meson" "uthash" "ninja"
	"wget" "curl" "git"

	#
	"samba" "network-manager-applet" "htop"

	# fonts
	"ttf-jetbrains-mono-nerd" "ttf-sourcecodepro-nerd"
	"ttf-nerd-fonts-symbols" "ttf-nerd-fonts-symbols-common"

	# xorg x11
	"xorg-xsetroot" "xorg-xbacklight" "xorg-xinput" "xorg-xprop" "xorg-xkill" "xorg-xrandr"
	"xclip" "xsel" "xdotool" "gtk-engine-murrine" "xdg-user-dirs-gtk" "xed"

	# utils
	"dunst" "feh" "light" "fzf" "ripgrep" "fd" "neovim" "tmux" "gufw"

	"i3lock" "eza" "imagemagick" "python-pywal"
	"rofi-emoji" "rofi-calc"

	# cli tools
	"direnv" "zoxide" "lazydocker" "serpl" "lazygit" "lazysql"
	"trash-cli"
)

# default selected packages
# if all are selected then use: selected_pkgs=$pkgs
selected_pkgs=(
	"zoxide"
	"lazydocker"
)

pkgs_str=$(printf ' "%s" ' "${pkgs[@]}")
selected_pkgs_str=$(printf '"%s",' "${selected_pkgs[@]}")

fn_install_packages() {
	selected=$(~/.local/bin/select-from $pkgs_str --selected $selected_pkgs_str)
	selected_str=$(echo "$selected" | tr '\n' ' ')
	gum log --level info "installing $(echo "$selected" | wc -l) packages"
	echo
	gum log --level info "yay --noconfirm --needed $selected_str"
	yay --noconfirm --needed "$selected_str"
}

fn_update_system() {
	gum log --level info "Updating system..."
	yay --noconfirm -Syu
}

fn_install_docker() {
	yay --needed --noconfirm -S docker docker-compose
	sudo usermod -aG docker "$(whoami)"
	sudo systemctl enable --now docker.service
	sudo systemctl restart docker
}

fn_discover_other_os_on_grub_menu() {
	set -e # Exit immediately if a command fails
	echo
	distro=$(awk -F= '/^NAME=/ {print $2}' /etc/os-release | tr -d '"')
	yay --needed --noconfirm -S os-prober

	# Backup and modify the grub configuration
	sudo cp /etc/default/grub /etc/default/grub.bak
	echo 'GRUB_DISABLE_OS_PROBER=false' | sudo tee -a /etc/default/grub >/dev/null

	# Run os-prober and update grub config
	sudo os-prober
	sudo grub-mkconfig -o /boot/grub/grub.cfg
	sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="$distro"
}

# Dynamically generate actions array from the values of actions_map
actions=(
	"update_system"
	"install_packages"
	"install_docker"
	"discover_other_os_on_grub_menu"
	"quit"
)
actions_str=$(printf ' %s ' "${actions[@]}")

while true; do
	gum log --level info "Choose a function to run:"
	selected_action=$(~/.local/bin/select-from $actions_str --limit 1)
	case $selected_action in
	update_system)
		fn_update_system
		;;
	install_packages)
		fn_install_packages
		;;
	install_docker)
		fn_install_docker
		;;
	discover_other_os_on_grub_menu)
		fn_discover_other_os_on_grub_menu
		;;
	quit)
		exit 0
		;;
	*)
		gum log --level error "invalid choice. please choose a valid option."
		;;
	esac
	printf "\n\n"
done
